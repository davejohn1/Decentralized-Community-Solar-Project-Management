;; Energy Production Tracking Contract
;; Monitors electricity generated by solar panels

;; Error codes
(define-constant ERR_UNAUTHORIZED u2000)
(define-constant ERR_PANEL_NOT_FOUND u2001)
(define-constant ERR_INVALID_PRODUCTION u2002)
(define-constant ERR_INVALID_DATE u2003)

;; Data maps
(define-map daily-production
  { panel-id: uint, date: uint }
  {
    energy-produced: uint,
    weather-condition: uint
  }
)

(define-map monthly-totals
  { panel-id: uint, year: uint, month: uint }
  {
    total-energy: uint,
    days-reported: uint
  }
)

(define-map annual-totals
  { panel-id: uint, year: uint }
  {
    total-energy: uint,
    months-reported: uint
  }
)

;; Weather condition constants
(define-constant WEATHER_SUNNY u1)
(define-constant WEATHER_PARTLY_CLOUDY u2)
(define-constant WEATHER_CLOUDY u3)
(define-constant WEATHER_RAINY u4)

;; Contract administrator
(define-data-var contract-admin principal tx-sender)

;; Read-only functions
(define-read-only (get-daily-production (panel-id uint) (date uint))
  (map-get? daily-production { panel-id: panel-id, date: date })
)

(define-read-only (get-monthly-total (panel-id uint) (year uint) (month uint))
  (map-get? monthly-totals { panel-id: panel-id, year: year, month: month })
)

(define-read-only (get-annual-total (panel-id uint) (year uint))
  (map-get? annual-totals { panel-id: panel-id, year: year })
)

;; Check if caller is admin
(define-private (is-admin)
  (is-eq tx-sender (var-get contract-admin))
)

;; Extract year from date (format: YYYYMMDD)
(define-private (extract-year (date uint))
  (/ date u10000)
)

;; Extract month from date (format: YYYYMMDD)
(define-private (extract-month (date uint))
  (mod (/ date u100) u100)
)

;; Public functions
(define-public (record-production (panel-id uint) (date uint) (energy-produced uint) (weather-condition uint))
  (begin
    (asserts! (or (is-admin) (is-authorized-reporter)) (err ERR_UNAUTHORIZED))
    (asserts! (> energy-produced u0) (err ERR_INVALID_PRODUCTION))
    (asserts! (and (>= weather-condition WEATHER_SUNNY) (<= weather-condition WEATHER_RAINY)) (err ERR_INVALID_PRODUCTION))

    ;; Record daily production
    (map-set daily-production
      { panel-id: panel-id, date: date }
      {
        energy-produced: energy-produced,
        weather-condition: weather-condition
      }
    )

    ;; Update monthly totals
    (let (
      (year (extract-year date))
      (month (extract-month date))
      (monthly-data (default-to { total-energy: u0, days-reported: u0 }
                    (map-get? monthly-totals { panel-id: panel-id, year: year, month: month })))
    )
      (map-set monthly-totals
        { panel-id: panel-id, year: year, month: month }
        {
          total-energy: (+ (get total-energy monthly-data) energy-produced),
          days-reported: (+ (get days-reported monthly-data) u1)
        }
      )

      ;; Update annual totals
      (let (
        (annual-data (default-to { total-energy: u0, months-reported: u0 }
                     (map-get? annual-totals { panel-id: panel-id, year: year })))
      )
        (map-set annual-totals
          { panel-id: panel-id, year: year }
          {
            total-energy: (+ (get total-energy annual-data) energy-produced),
            months-reported: (if (is-eq (get days-reported monthly-data) u0)
                              (+ (get months-reported annual-data) u1)
                              (get months-reported annual-data))
          }
        )
      )
    )
    (ok true)
  )
)

;; Check if caller is authorized reporter
(define-private (is-authorized-reporter)
  ;; In a real implementation, this would check against a list of authorized reporters
  ;; For simplicity, we're returning false here
  false
)

